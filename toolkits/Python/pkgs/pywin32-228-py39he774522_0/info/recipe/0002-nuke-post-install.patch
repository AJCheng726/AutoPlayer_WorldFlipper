From 3098157e6566589427d3ec06a857d6fe0f2ec367 Mon Sep 17 00:00:00 2001
From: Mike Sarahan <msarahan@gmail.com>
Date: Wed, 15 Jan 2020 09:17:28 -0600
Subject: [PATCH 2/4] nuke post install

---
 setup.py | 29 +----------------------------
 1 file changed, 1 insertion(+), 28 deletions(-)

diff --git a/setup.py b/setup.py
index 7ff3eac..3fe7f5f 100644
--- a/setup.py
+++ b/setup.py
@@ -1375,34 +1375,7 @@ class my_build_ext(build_ext):
 class my_install(install):
     def run(self):
         install.run(self)
-        # Custom script we run at the end of installing - this is the same script
-        # run by bdist_wininst
-        # This child process won't be able to install the system DLLs until our
-        # process has terminated (as distutils imports win32api!), so we must use
-        # some 'no wait' executor - spawn seems fine!  We pass the PID of this
-        # process so the child will wait for us.
-        # XXX - hmm - a closer look at distutils shows it only uses win32api
-        # if _winreg fails - and this never should.  Need to revisit this!
-        # If self.root has a value, it means we are being "installed" into
-        # some other directory than Python itself (eg, into a temp directory
-        # for bdist_wininst to use) - in which case we must *not* run our
-        # installer
-        if not self.dry_run and not self.root:
-            # We must run the script we just installed into Scripts, as it
-            # may have had 2to3 run over it.
-            filename = os.path.join(self.install_scripts, "pywin32_postinstall.py")
-            if not os.path.isfile(filename):
-                raise RuntimeError("Can't find '%s'" % (filename,))
-            print("Executing post install script...")
-            # What executable to use?  This one I guess.
-            subprocess.Popen([
-                sys.executable, filename,
-                "-install",
-                "-destination", self.install_lib,
-                "-quiet",
-                "-wait", str(os.getpid()),
-            ])
-
+        
 # As per get_source_files, we need special handling so .mc file is
 # processed first.  It appears there was an intention to fix distutils
 # itself, but as at 2.4 that hasn't happened.  We need yet more vile
-- 
2.20.1.windows.1

